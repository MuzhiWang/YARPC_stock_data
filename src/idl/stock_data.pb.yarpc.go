// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: stock_data.proto

package muzwang_stock_data

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// StockDataYARPCClient is the YARPC client-side interface for the StockData service.
type StockDataYARPCClient interface {
	Test(context.Context, *TestRequest, ...yarpc.CallOption) (*TestResponse, error)
}

func newStockDataYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) StockDataYARPCClient {
	return &_StockDataYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "muzwang.stock_data.StockData",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewStockDataYARPCClient builds a new YARPC client for the StockData service.
func NewStockDataYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) StockDataYARPCClient {
	return newStockDataYARPCClient(clientConfig, nil, options...)
}

// StockDataYARPCServer is the YARPC server-side interface for the StockData service.
type StockDataYARPCServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

type buildStockDataYARPCProceduresParams struct {
	Server      StockDataYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildStockDataYARPCProcedures(params buildStockDataYARPCProceduresParams) []transport.Procedure {
	handler := &_StockDataYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "muzwang.stock_data.StockData",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Test",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.Test,
							NewRequest:  newStockDataServiceTestYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildStockDataYARPCProcedures prepares an implementation of the StockData service for YARPC registration.
func BuildStockDataYARPCProcedures(server StockDataYARPCServer) []transport.Procedure {
	return buildStockDataYARPCProcedures(buildStockDataYARPCProceduresParams{Server: server})
}

// FxStockDataYARPCClientParams defines the input
// for NewFxStockDataYARPCClient. It provides the
// paramaters to get a StockDataYARPCClient in an
// Fx application.
type FxStockDataYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxStockDataYARPCClientResult defines the output
// of NewFxStockDataYARPCClient. It provides a
// StockDataYARPCClient to an Fx application.
type FxStockDataYARPCClientResult struct {
	fx.Out

	Client StockDataYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxStockDataYARPCClient provides a StockDataYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    muzwang_stock_data.NewFxStockDataYARPCClient("service-name"),
//    ...
//  )
func NewFxStockDataYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxStockDataYARPCClientParams) FxStockDataYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxStockDataYARPCClientResult{
			Client: newStockDataYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxStockDataYARPCProceduresParams defines the input
// for NewFxStockDataYARPCProcedures. It provides the
// paramaters to get StockDataYARPCServer procedures in an
// Fx application.
type FxStockDataYARPCProceduresParams struct {
	fx.In

	Server      StockDataYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxStockDataYARPCProceduresResult defines the output
// of NewFxStockDataYARPCProcedures. It provides
// StockDataYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxStockDataYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxStockDataYARPCProcedures provides StockDataYARPCServer procedures to an Fx application.
// It expects a StockDataYARPCServer to be present in the container.
//
//  fx.Provide(
//    muzwang_stock_data.NewFxStockDataYARPCProcedures(),
//    ...
//  )
func NewFxStockDataYARPCProcedures() interface{} {
	return func(params FxStockDataYARPCProceduresParams) FxStockDataYARPCProceduresResult {
		return FxStockDataYARPCProceduresResult{
			Procedures: buildStockDataYARPCProcedures(buildStockDataYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "muzwang.stock_data.StockData",
				FileDescriptors: yarpcFileDescriptorClosure46d4f64edd7c98cf,
			},
		}
	}
}

type _StockDataYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_StockDataYARPCCaller) Test(ctx context.Context, request *TestRequest, options ...yarpc.CallOption) (*TestResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Test", request, newStockDataServiceTestYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*TestResponse)
	if !ok {
		return nil, protobuf.CastError(emptyStockDataServiceTestYARPCResponse, responseMessage)
	}
	return response, err
}

type _StockDataYARPCHandler struct {
	server StockDataYARPCServer
}

func (h *_StockDataYARPCHandler) Test(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *TestRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*TestRequest)
		if !ok {
			return nil, protobuf.CastError(emptyStockDataServiceTestYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Test(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newStockDataServiceTestYARPCRequest() proto.Message {
	return &TestRequest{}
}

func newStockDataServiceTestYARPCResponse() proto.Message {
	return &TestResponse{}
}

var (
	emptyStockDataServiceTestYARPCRequest  = &TestRequest{}
	emptyStockDataServiceTestYARPCResponse = &TestResponse{}
)

var yarpcFileDescriptorClosure46d4f64edd7c98cf = [][]byte{
	// stock_data.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2e, 0xc9, 0x4f,
		0xce, 0x8e, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca, 0x2d,
		0xad, 0x2a, 0x4f, 0xcc, 0x4b, 0xd7, 0x43, 0xc8, 0x28, 0x29, 0x73, 0x71, 0x87, 0xa4, 0x16, 0x97,
		0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x70, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6,
		0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x4a, 0x2a, 0x5c, 0x3c, 0x10, 0x45, 0xc5,
		0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xd8, 0x55, 0x19, 0x45, 0x70, 0x71, 0x06, 0x83, 0x0c, 0x76, 0x49,
		0x2c, 0x49, 0x14, 0xf2, 0xe6, 0x62, 0x01, 0x69, 0x11, 0x92, 0xd7, 0xc3, 0xb4, 0x54, 0x0f, 0xc9,
		0x46, 0x29, 0x05, 0xdc, 0x0a, 0x20, 0xb6, 0x29, 0x31, 0x24, 0xb1, 0x81, 0xdd, 0x6f, 0x0c, 0x08,
		0x00, 0x00, 0xff, 0xff, 0x81, 0x8e, 0x88, 0xce, 0xd3, 0x00, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) StockDataYARPCClient {
			return NewStockDataYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
