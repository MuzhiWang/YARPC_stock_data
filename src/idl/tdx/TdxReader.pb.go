// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TdxReader.proto

package tdxreader

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DateMetric int32

const (
	UNDEFINED DateMetric = 0
	ONE_MIN   DateMetric = 1
	FIVE_MIN  DateMetric = 2
	ONE_DAY   DateMetric = 3
)

var DateMetric_name = map[int32]string{
	0: "UNDEFINED",
	1: "ONE_MIN",
	2: "FIVE_MIN",
	3: "ONE_DAY",
}

var DateMetric_value = map[string]int32{
	"UNDEFINED": 0,
	"ONE_MIN":   1,
	"FIVE_MIN":  2,
	"ONE_DAY":   3,
}

func (DateMetric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{0}
}

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()      { *m = HelloRequest{} }
func (*HelloRequest) ProtoMessage() {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HelloReply) Reset()      { *m = HelloReply{} }
func (*HelloReply) ProtoMessage() {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{1}
}
func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return m.Size()
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ReadTdxFileRequest struct {
	FilePath string     `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Metric   DateMetric `protobuf:"varint,2,opt,name=metric,proto3,enum=tdxreader.DateMetric" json:"metric,omitempty"`
}

func (m *ReadTdxFileRequest) Reset()      { *m = ReadTdxFileRequest{} }
func (*ReadTdxFileRequest) ProtoMessage() {}
func (*ReadTdxFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{2}
}
func (m *ReadTdxFileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadTdxFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadTdxFileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadTdxFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadTdxFileRequest.Merge(m, src)
}
func (m *ReadTdxFileRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadTdxFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadTdxFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadTdxFileRequest proto.InternalMessageInfo

func (m *ReadTdxFileRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ReadTdxFileRequest) GetMetric() DateMetric {
	if m != nil {
		return m.Metric
	}
	return UNDEFINED
}

type StockData struct {
	DateTime string  `protobuf:"bytes,1,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Open     float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High     float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low      float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close    float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	Amount   float64 `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Volume   float64 `protobuf:"fixed64,7,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (m *StockData) Reset()      { *m = StockData{} }
func (*StockData) ProtoMessage() {}
func (*StockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{3}
}
func (m *StockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StockData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockData.Merge(m, src)
}
func (m *StockData) XXX_Size() int {
	return m.Size()
}
func (m *StockData) XXX_DiscardUnknown() {
	xxx_messageInfo_StockData.DiscardUnknown(m)
}

var xxx_messageInfo_StockData proto.InternalMessageInfo

func (m *StockData) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

func (m *StockData) GetOpen() float64 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *StockData) GetHigh() float64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *StockData) GetLow() float64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *StockData) GetClose() float64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *StockData) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *StockData) GetVolume() float64 {
	if m != nil {
		return m.Volume
	}
	return 0
}

type TdxFileData struct {
	Data []*StockData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *TdxFileData) Reset()      { *m = TdxFileData{} }
func (*TdxFileData) ProtoMessage() {}
func (*TdxFileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab01b19ef42b00, []int{4}
}
func (m *TdxFileData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TdxFileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TdxFileData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TdxFileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TdxFileData.Merge(m, src)
}
func (m *TdxFileData) XXX_Size() int {
	return m.Size()
}
func (m *TdxFileData) XXX_DiscardUnknown() {
	xxx_messageInfo_TdxFileData.DiscardUnknown(m)
}

var xxx_messageInfo_TdxFileData proto.InternalMessageInfo

func (m *TdxFileData) GetData() []*StockData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("tdxreader.DateMetric", DateMetric_name, DateMetric_value)
	proto.RegisterType((*HelloRequest)(nil), "tdxreader.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "tdxreader.HelloReply")
	proto.RegisterType((*ReadTdxFileRequest)(nil), "tdxreader.ReadTdxFileRequest")
	proto.RegisterType((*StockData)(nil), "tdxreader.StockData")
	proto.RegisterType((*TdxFileData)(nil), "tdxreader.TdxFileData")
}

func init() { proto.RegisterFile("TdxReader.proto", fileDescriptor_73ab01b19ef42b00) }

var fileDescriptor_73ab01b19ef42b00 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4f, 0x8f, 0xd2, 0x40,
	0x1c, 0xed, 0x50, 0xfe, 0x6c, 0x7f, 0xac, 0x2b, 0x99, 0xec, 0xae, 0x13, 0x12, 0x27, 0xa4, 0x07,
	0x43, 0x4c, 0xe4, 0x80, 0x07, 0xe3, 0xd1, 0xb5, 0x10, 0x39, 0x2c, 0x92, 0x8a, 0x46, 0x4f, 0x38,
	0xd2, 0x11, 0x1a, 0xa7, 0x0c, 0xc2, 0xe0, 0xb2, 0x9e, 0xfc, 0x04, 0xc6, 0xcf, 0xe0, 0x45, 0x3f,
	0x8a, 0x47, 0x8e, 0x7b, 0x94, 0x72, 0xf1, 0xb8, 0x1f, 0xc1, 0xcc, 0xb4, 0x74, 0x9b, 0xec, 0xed,
	0xf7, 0xde, 0xef, 0xf5, 0xcd, 0xbc, 0xbe, 0x81, 0xbb, 0xc3, 0x60, 0xed, 0x73, 0x16, 0xf0, 0x45,
	0x6b, 0xbe, 0x90, 0x4a, 0x62, 0x47, 0x05, 0xeb, 0x85, 0x21, 0x5c, 0x17, 0x0e, 0x5f, 0x70, 0x21,
	0xa4, 0xcf, 0x3f, 0xaf, 0xf8, 0x52, 0x61, 0x0c, 0xc5, 0x19, 0x8b, 0x38, 0x41, 0x0d, 0xd4, 0x74,
	0x7c, 0x33, 0xbb, 0x0f, 0x00, 0x52, 0xcd, 0x5c, 0x5c, 0x62, 0x02, 0x95, 0x88, 0x2f, 0x97, 0x6c,
	0xb2, 0x17, 0xed, 0xa1, 0x3b, 0x02, 0xac, 0x8f, 0x19, 0x06, 0xeb, 0x6e, 0x28, 0xf8, 0xde, 0xb1,
	0x0e, 0x07, 0x1f, 0x43, 0xc1, 0x07, 0x4c, 0x4d, 0xd3, 0x0f, 0x32, 0x8c, 0x1f, 0x41, 0x39, 0xe2,
	0x6a, 0x11, 0x8e, 0x49, 0xa1, 0x81, 0x9a, 0x47, 0xed, 0x93, 0x56, 0x76, 0xb3, 0x96, 0xc7, 0x14,
	0x3f, 0x37, 0x4b, 0x3f, 0x15, 0xb9, 0xbf, 0x10, 0x38, 0xaf, 0x94, 0x1c, 0x7f, 0xf2, 0x98, 0x62,
	0xda, 0x38, 0x60, 0x8a, 0x0f, 0xc3, 0xec, 0xba, 0x19, 0xd6, 0x31, 0xe4, 0x9c, 0xcf, 0x8c, 0x2d,
	0xf2, 0xcd, 0xac, 0xb9, 0x69, 0x38, 0x99, 0x12, 0x3b, 0xe1, 0xf4, 0x8c, 0x6b, 0x60, 0x0b, 0x79,
	0x41, 0x8a, 0x86, 0xd2, 0x23, 0x3e, 0x86, 0xd2, 0x58, 0xc8, 0x25, 0x27, 0x25, 0xc3, 0x25, 0x00,
	0x9f, 0x42, 0x99, 0x45, 0x72, 0x35, 0x53, 0xa4, 0x6c, 0xe8, 0x14, 0x69, 0xfe, 0x8b, 0x14, 0xab,
	0x88, 0x93, 0x4a, 0xc2, 0x27, 0xc8, 0x7d, 0x02, 0xd5, 0xf4, 0x37, 0x98, 0xab, 0x36, 0xa1, 0x18,
	0x30, 0xc5, 0x08, 0x6a, 0xd8, 0xcd, 0x6a, 0xfb, 0x38, 0x97, 0x32, 0x8b, 0xe3, 0x1b, 0xc5, 0xc3,
	0xe7, 0x00, 0x37, 0xc1, 0xf1, 0x1d, 0x70, 0x5e, 0xf7, 0xbd, 0x4e, 0xb7, 0xd7, 0xef, 0x78, 0x35,
	0x0b, 0x57, 0xa1, 0xf2, 0xb2, 0xdf, 0x19, 0x9d, 0xf7, 0xfa, 0x35, 0x84, 0x0f, 0xe1, 0xa0, 0xdb,
	0x7b, 0x93, 0xa0, 0xc2, 0x7e, 0xe5, 0x3d, 0x7b, 0x57, 0xb3, 0xdb, 0xdf, 0x11, 0x38, 0x59, 0xe7,
	0xf8, 0x29, 0x94, 0x4c, 0x7d, 0xf8, 0x5e, 0xee, 0xdc, 0x7c, 0xe9, 0xf5, 0x93, 0xdb, 0x8b, 0xb9,
	0xb8, 0x74, 0x2d, 0xdc, 0x85, 0x6a, 0xae, 0x51, 0x7c, 0x3f, 0xa7, 0xbb, 0xdd, 0x74, 0xfd, 0x34,
	0xb7, 0xce, 0xa5, 0x77, 0xad, 0xb3, 0xf7, 0x9b, 0x2d, 0xb5, 0xae, 0xb6, 0xd4, 0xba, 0xde, 0x52,
	0xf4, 0x2d, 0xa6, 0xe8, 0x77, 0x4c, 0xd1, 0x9f, 0x98, 0xa2, 0x4d, 0x4c, 0xd1, 0xdf, 0x98, 0xa2,
	0x7f, 0x31, 0xb5, 0xae, 0x63, 0x8a, 0x7e, 0xec, 0xa8, 0xb5, 0xd9, 0x51, 0xeb, 0x6a, 0x47, 0x2d,
	0xc0, 0xd1, 0xea, 0xeb, 0x05, 0x9b, 0x4d, 0xb4, 0xed, 0x28, 0xf1, 0x3d, 0x3b, 0xca, 0x72, 0x0d,
	0xf4, 0x53, 0x1e, 0xa0, 0x9f, 0x05, 0x7b, 0xe8, 0xbd, 0xfd, 0x50, 0x36, 0x2f, 0xfb, 0xf1, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x31, 0x63, 0x69, 0xec, 0x02, 0x00, 0x00,
}

func (x DateMetric) String() string {
	s, ok := DateMetric_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *HelloRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloRequest)
	if !ok {
		that2, ok := that.(HelloRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *HelloReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HelloReply)
	if !ok {
		that2, ok := that.(HelloReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *ReadTdxFileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReadTdxFileRequest)
	if !ok {
		that2, ok := that.(ReadTdxFileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	if this.Metric != that1.Metric {
		return false
	}
	return true
}
func (this *StockData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StockData)
	if !ok {
		that2, ok := that.(StockData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DateTime != that1.DateTime {
		return false
	}
	if this.Open != that1.Open {
		return false
	}
	if this.High != that1.High {
		return false
	}
	if this.Low != that1.Low {
		return false
	}
	if this.Close != that1.Close {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Volume != that1.Volume {
		return false
	}
	return true
}
func (this *TdxFileData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TdxFileData)
	if !ok {
		that2, ok := that.(TdxFileData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *HelloRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdxreader.HelloRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HelloReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdxreader.HelloReply{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadTdxFileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tdxreader.ReadTdxFileRequest{")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StockData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tdxreader.StockData{")
	s = append(s, "DateTime: "+fmt.Sprintf("%#v", this.DateTime)+",\n")
	s = append(s, "Open: "+fmt.Sprintf("%#v", this.Open)+",\n")
	s = append(s, "High: "+fmt.Sprintf("%#v", this.High)+",\n")
	s = append(s, "Low: "+fmt.Sprintf("%#v", this.Low)+",\n")
	s = append(s, "Close: "+fmt.Sprintf("%#v", this.Close)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Volume: "+fmt.Sprintf("%#v", this.Volume)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TdxFileData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdxreader.TdxFileData{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTdxReader(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTdxReader(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTdxReader(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadTdxFileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadTdxFileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadTdxFileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metric != 0 {
		i = encodeVarintTdxReader(dAtA, i, uint64(m.Metric))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FilePath) > 0 {
		i -= len(m.FilePath)
		copy(dAtA[i:], m.FilePath)
		i = encodeVarintTdxReader(dAtA, i, uint64(len(m.FilePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Volume != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Volume))))
		i--
		dAtA[i] = 0x39
	}
	if m.Amount != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i--
		dAtA[i] = 0x31
	}
	if m.Close != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Close))))
		i--
		dAtA[i] = 0x29
	}
	if m.Low != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Low))))
		i--
		dAtA[i] = 0x21
	}
	if m.High != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.High))))
		i--
		dAtA[i] = 0x19
	}
	if m.Open != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Open))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.DateTime) > 0 {
		i -= len(m.DateTime)
		copy(dAtA[i:], m.DateTime)
		i = encodeVarintTdxReader(dAtA, i, uint64(len(m.DateTime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TdxFileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TdxFileData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TdxFileData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTdxReader(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTdxReader(dAtA []byte, offset int, v uint64) int {
	offset -= sovTdxReader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTdxReader(uint64(l))
	}
	return n
}

func (m *HelloReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTdxReader(uint64(l))
	}
	return n
}

func (m *ReadTdxFileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovTdxReader(uint64(l))
	}
	if m.Metric != 0 {
		n += 1 + sovTdxReader(uint64(m.Metric))
	}
	return n
}

func (m *StockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DateTime)
	if l > 0 {
		n += 1 + l + sovTdxReader(uint64(l))
	}
	if m.Open != 0 {
		n += 9
	}
	if m.High != 0 {
		n += 9
	}
	if m.Low != 0 {
		n += 9
	}
	if m.Close != 0 {
		n += 9
	}
	if m.Amount != 0 {
		n += 9
	}
	if m.Volume != 0 {
		n += 9
	}
	return n
}

func (m *TdxFileData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTdxReader(uint64(l))
		}
	}
	return n
}

func sovTdxReader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTdxReader(x uint64) (n int) {
	return sovTdxReader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HelloRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HelloReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HelloReply{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadTdxFileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadTdxFileRequest{`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StockData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StockData{`,
		`DateTime:` + fmt.Sprintf("%v", this.DateTime) + `,`,
		`Open:` + fmt.Sprintf("%v", this.Open) + `,`,
		`High:` + fmt.Sprintf("%v", this.High) + `,`,
		`Low:` + fmt.Sprintf("%v", this.Low) + `,`,
		`Close:` + fmt.Sprintf("%v", this.Close) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Volume:` + fmt.Sprintf("%v", this.Volume) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TdxFileData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForData := "[]*StockData{"
	for _, f := range this.Data {
		repeatedStringForData += strings.Replace(f.String(), "StockData", "StockData", 1) + ","
	}
	repeatedStringForData += "}"
	s := strings.Join([]string{`&TdxFileData{`,
		`Data:` + repeatedStringForData + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTdxReader(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdxReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdxReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdxReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdxReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdxReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdxReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadTdxFileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadTdxFileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadTdxFileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdxReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdxReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			m.Metric = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric |= DateMetric(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdxReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdxReader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdxReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Open = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.High = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Low = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Close = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Volume = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTdxReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TdxFileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TdxFileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TdxFileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdxReader
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdxReader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &StockData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdxReader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdxReader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTdxReader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTdxReader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdxReader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTdxReader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTdxReader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTdxReader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTdxReader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTdxReader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTdxReader = fmt.Errorf("proto: unexpected end of group")
)
